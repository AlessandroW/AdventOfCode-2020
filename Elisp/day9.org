#+TITLE: Advent of Code 2020 in Emacs Lisp - Day 9
#+roam_tags: "elisp" "advent of code"
#+hugo_tags: "elisp" "advent of code"
#+DATE: 2020-12-31
#+HUGO_BASE_DIR: /home/temporary/blogs/dailyemacs
#+HUGO_FRONT_MATTER_FORMAT: yaml
#+STARTUP: overview

It is well past christmas but finishing the Advent of Code fast was never the goal (maybe before the Advent of Code 2021).
So let's dive into day 9 of the advent of code.

* Encoding Error :ATTACH:
:PROPERTIES:
:ID:       0a843586-291e-45f8-989f-f50dbe238b5c
:END:

#+CAPTION: Photo by [[https://unsplash.com/@maurosbicego?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText][Mauro Sbicego]] on [[https://unsplash.com/s/photos/cryptography?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText][Unsplash]]
[[attachment:_20201231_132401screenshot.png]]



This day is all about hacking and codes.
We want to attach our computer to the data port but the data is encrypted with the /eXchange-Masking Addition System/ (/XMAS/) cypher.
Our task is to exploit the cypher.

The XMAS cypher is alist of numbers, starting with a /preamble/ and followed by /valid/ numbers.
The preamble consits of 25 numbers and a valid number is the sum of any /two/ of the 25 immediately previous numbers that /are distinct/.
For example, if our preamble consists of ony five numbers (=35 20 15 25 47=) the next number, =40=, is valid because =15 + 25 = 40=.
The following number, =62=, is also valid because it is the sum of some of the previous five numbers, =20 15 25 47 40=; =60 = 15 + 47=.

If you want to read the full introduction to the puzzle: [[https://adventofcode.com/2020/day/9][here's the link]].
Again, we will use [[https://github.com/sophiebits/adventofcode/blob/main/2020/day09.py][Sohpiebits' Python solution]] as an orientation for our Emacs Lisp code.

** Part One
In the first part we need to find the first /invalid/ number, i.e. the first number that is not the sum of two of the previous 25 numbers.
Our approach will be the following:
- define a function, =is-sum-of-two-p=, that tests if a number is valid
- loop through our input and return the first number that is valid.

*** Is This Number Valid?
Recall, a valid number is the sum of /two/ of the previous 25 numbers.
In Python:
#+begin_src python
def issumoftwo(n, options):
    options = set(options)
    for o in options:
        if n-o != o and n-o in options:
            return True
    return False
#+end_src

What does this algorithm do?
- Reduce the options to unique numbers.
- Return =True= if the number to-be-tested minus the current option is a different option, i.e. there exist two distinct numbers summing up to our number.
  This is similar to part one of day one.

Let's translate this to Emacs Lisp:
#+begin_src elisp :session session :results silent
(defun is-sum-of-two-p (n options)
  (setq options (remove-duplicates options))
  (catch 'return
    (dolist (o options)
      (when (and (/= (- n o) o )
                 (member (- n o) options))
        (throw 'return 't)))
    'nil)
  )
#+end_src

The only major difference between the Python and Emacs Lisp code is the handling of the return value.
In vanilla Emacs Lisp there is no =return=.
Instead, you can use the combination of =catch= and =throw= combined with a tag.
This can be compared to Python's
#+begin_src python :exports both
try:
    raise Exception("this-is-the-return-value")
except Exception as return_value:
    return return_value
#+end_src

#+RESULTS:
: this-is-the-return-value

After defining the functions let's quickly test the two conditions =member= of options and not-the-same-number.
#+begin_src elisp :session session :exports both
(assert (is-sum-of-two-p 60 '(20 15 25 47 40)))
(assert (not (is-sum-of-two-p 60 '(10 10 30 30 40))))
#+end_src

Works!



    

*** Returning The First Valid Number
After defining our valid-number-checker we can move on to test all numbers.
In Python:
#+begin_src python
for i in range(25, len(lines)):
    if not issumoftwo(lines[i], lines[i-25:i]):
        goal = lines[i]
        print(goal)
        break
#+end_src

If we break it down the algorithm:
- skips the preamble and iterates over the remaining lines
- checks the current number with the previous 25 as options
- returns the first valid number

In Elisp we can do:
#+begin_src elisp :session session :exports both
(defun solve-part-one (lines &optional preamble)
  (unless preamble
    (setq preamble 25))
  (catch 'return
    (let ((i preamble))
      (while (< i (length lines))
        (unless (is-sum-of-two-p (nth i lines)
                                 (subseq lines (- i preamble) i))
          (throw 'return (nth i lines)))
        (setq i (+ i 1))))
    ))

(setq example-input '(35 20 15 25 47 40 62 55 65 95 102 117 150 182 127 219 299 277 309 576))
(assert (= (solve-part-one example-input 5)
           127))
(solve-part-one example-input 5)
#+end_src

#+RESULTS:
: 127

Here I changed a couple of things.
1. Emacs Lisp has the =unless= conditional.
    It evaluates the body /only/ if the condition is false.
2. To test the example I included an /optional/ preamble parameter.
    Default would be 25 but in the Advent of Code example it is five.
3. Instead of using a for-loop  we used a while-loop.
4. Like for the previous =return= we used a =catch-throw= construct for the =break=.

Now that we have our building blocks we can solve part one.

*** Solving Part One
As always, the first step is to load the puzzle-input.
#+begin_src elisp :session session :results none
(setq puzzle-input (mapcar #'string-to-number
                           (split-string (with-current-buffer "*scratch*" (buffer-string))
                                         "\n" 't)))
#+end_src
Note, that the sharp-quote (=#'=)= is [[https://emacs.stackexchange.com/questions/35988/when-should-sharp-quotes-be-used][syntactic sugar]] for =function=, that is again similar to the quote in set-quote (=setq)=.


#+begin_src elisp :session session :exports both
(solve-part-one puzzle-input)
#+end_src

#+RESULTS:
: 18272118

That is correct! Now we can move on to part two.
** Part Two
The catch in the scond part is that we now have to find a /contiguous set of at least two numbers/.
So two to the the number of the previous numbers.
To solve part two we need to find the /smallest/ and the /largest/ number in the set and return their sum.
This means we need to change our =is-sum-of-two-p= function.

Sophiebits tackles the problem by first storing a running sum of our values.
#+begin_src python
partsum = [0]
acc = 0
for x in lines:
    acc += x
    partsum.append(acc)
#+end_src

We can do this with =reduce= and saving the intermediate results in =partsum=.
Additionally, we =reverse= the list to mimic =append= behaviour.
#+begin_src elisp :session session :exports both
(require 'seq)

(defun get-running-sum (sequence)
  (let (partsum)
  (seq-reduce (lambda (acc x) (progn (push acc partsum)
                                     (+ acc x))) sequence 0)
  (reverse partsum)))
(get-running-sum '(1 2 3 4 5))
#+end_src

#+RESULTS:
| 0 | 1 | 3 | 6 | 10 |

In the next step we loop over our input and check if the difference between two elements of our running sum is equal to our current number.
In other words: we first check if the current number is the sum of the =ith= and the =i+2th = jth= number.
Then we increase the step size to three, to four until =(lenth partsum)=.
For example, if our number is =10= it would be the sum of all the previous numbers in the example of =get-running-sum= above.
After we found the number we return the minimum and maximum.
In this case 1 and 5.

In Python:
#+begin_src python
for i in range(len(partsum)):
    j = i + 2
    while 0 <= j < len(partsum) and partsum[j] - partsum[i] <= goal:
        if partsum[j] - partsum[i] == goal:
            print(max(lines[i:j]) + min(lines[i:j]))
            break
        j += 1
#+end_src

and in Elisp:
#+begin_src elisp :session session :exports both

(defun solve-part-two (input goal)
  (let ((i 0) j (partsum (get-running-sum input)))
    (print partsum)
    (catch 'result
      (while (< i (length partsum))
        (setq j (+ i 2))
        (while (and (< j (length partsum))
                    (<= (- (nth j partsum) (nth i partsum))
                        goal))
          (if (= (- (nth j partsum) (nth i partsum)) goal)
              (throw 'result (+ (seq-max (subseq input i j))
                                (seq-min (subseq input i j))))
            (setq j (+ 1 j))))
        (setq i (+ 1 i))))))

(assert (= (solve-part-two '(1 2 3 4 5) 10) 5))
(solve-part-two puzzle-input (solve-part-one puzzle-input))
#+end_src

#+RESULTS:
: 2186361

Done!



