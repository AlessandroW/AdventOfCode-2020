"""Unsere L√∂sung f√ºr Tag 3."""

EXAMPLE = """..##.......
#...#...#..
.#....#..#.
..#.#...#.#
.#...##..#.
..#.##.....
.#.#.#....#
.#........#
#.##...#...
#...##....#
.#..#...#.#"""


def baumf√§ller(buchstabe):
    if buchstabe == "#":
        return 1
    else:
        return 0


def positionierer(
    feld_unten, feld_rechts, zeilenl√§nge, steigung_unten=1, steigung_rechts=3
):
    if feld_rechts + steigung_rechts < zeilenl√§nge:
        return feld_unten + steigung_unten, feld_rechts + steigung_rechts
    else:
        zeilenumbruch = -(zeilenl√§nge - (feld_rechts + steigung_rechts))
        return feld_unten + steigung_unten, zeilenumbruch


def baumz√§hler(feld, steigung_unten=1, steigung_rechts=3):
    feld_unten = 0
    feld_rechts = 0
    zeilenl√§nge = len(feld[0])
    b√§ume = 0

    while feld_unten < len(feld):
        b√§ume += baumf√§ller(feld[feld_unten][feld_rechts])
        feld_unten, feld_rechts = positionierer(
            feld_unten, feld_rechts, zeilenl√§nge, steigung_unten, steigung_rechts
        )

    return b√§ume


def datenlader(dateiname):
    with open(dateiname) as file:
        return [line for line in file.read().split("\n") if line]


def l√∂se_part_1(feld):
    return baumz√§hler(feld)


def l√∂se_part_2(feld, steigungen_unten, steigungen_rechts):
    b√§ume = 1
    for steigung_unten, steigung_rechts in zip(steigungen_unten, steigungen_rechts):
        b√§ume *= baumz√§hler(feld, steigung_unten, steigung_rechts)
    return b√§ume


if __name__ == "__main__":
    assert baumf√§ller("#") == 1, "baum hat dich gef√§llt"
    assert baumf√§ller(".") == 0, "baum hat dich gef√§llt"
    assert positionierer(0, 0, 5) == (1, 3), "Verz√§hlt"
    assert positionierer(2, 6, 8) == (3, 1), "Verz√§hlt"
    assert positionierer(2, 7, 8) == (3, 2), "Verz√§hlt"
    assert positionierer(2, 8, 8) == (3, 3), "Verz√§hlt"
    assert positionierer(2, 5, 8) == (3, 0), "Verz√§hlt"
    assert baumz√§hler(EXAMPLE.split("\n")) == 7, "Verz√§hlt! üòù"
    assert baumz√§hler(EXAMPLE.split("\n"), steigung_rechts=1) == 2, "Verz√§hlt! üòù"
    assert baumz√§hler(EXAMPLE.split("\n"), steigung_rechts=5) == 3, "Verz√§hlt! üòù"
    assert baumz√§hler(EXAMPLE.split("\n"), steigung_rechts=7) == 4, "Verz√§hlt! üòù"
    assert (
        baumz√§hler(EXAMPLE.split("\n"), steigung_unten=2, steigung_rechts=1) == 2
    ), "Verz√§hlt! üòù"

    feld = datenlader("day3.txt")

    assert l√∂se_part_1(EXAMPLE.split("\n")) == 7

    steigungen_rechts = [1, 3, 5, 7, 1]
    steigungen_unten = [1, 1, 1, 1, 2]
    assert l√∂se_part_2(EXAMPLE.split("\n"), steigungen_unten, steigungen_rechts) == 336

    b√§ume = l√∂se_part_2(feld, steigungen_unten, steigungen_rechts)
    print(f"Die Anzahl der B√§ume ist {b√§ume}.")
